{"version":3,"file":"static/js/239.fc4feb12.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","Redux/contacts/Selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","Pages/Phonebook.styled.jsx","Pages/Phonebook.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport { Form as FormikForm } from 'formik';\nimport { Field } from \"formik\";\n\nexport const Form = styled(FormikForm)`\nwidth: 300px;\npadding: 30px;\nmargin-right:auto;\nmargin-left:auto;\nborder: 1px solid #008080;\nborder-radius:3px;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;`\n\nexport const FormField = styled.label`\ndisplay: flex;\nflex-direction: column;\ncolor: #696969;\nfont-size:24px;\nfont-weight: 600;`\nexport const Input = styled(Field)`\nmargin-top:10px;\npadding-left: 15px;\nborder-radius: 3px;\nborder: none;\nheight: 50px;`\nexport const AddBtn = styled.button`\nfont-size:18px;\nfont-weight: 500;\nmargin-top: 10px;\npadding:8px;\nweight: 150px;\ncolor: #fff;\nopacity: 0.7;\nborder: none;\nborder-radius:3px;\nbackground-color: #008080;\n&:hover {\n    opacity: 1;\n}`","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from \"@reduxjs/toolkit\";\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.filter.filter;\nexport const selectFilteredContacts = createSelector([selectContacts, selectFilter],\n    (contacts, filter) => {\n        const normalizeFilter = filter.toLowerCase();\n        return contacts.filter(contact => contact.name.toLowerCase().includes(normalizeFilter))\n    })\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Formik } from 'formik';\nimport { Form, FormField, Input, AddBtn } from './ContactForm.styled';\nimport { addContact } from 'Redux/contacts/Operations';\nimport { selectContacts } from 'Redux/contacts/Selectors';\nconst initialValues = {\n    name: '',\n    number: '',\n};\n\nexport const ContactForm = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n    const handleSubmit = (values, { resetForm }) => {\n        const newContact = contacts.find(contact => contact.name.toLowerCase() === values.name.toLowerCase())\n        if (newContact) {\n            resetForm();\n            return alert(`${values.name} is already in contacts`);\n        }\n        dispatch(addContact({\n            ...values,\n        }))\n        resetForm();\n    }\n\n    return <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n    >\n        <Form>\n            < FormField>Name\n                <Input\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    placeholder=\"Name\"\n                /></ FormField>\n            < FormField>Number\n                <Input\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    placeholder=\"Number\"\n                />\n            </ FormField>\n            <AddBtn type=\"submit\">Add contact</AddBtn>\n        </Form>\n    </Formik>\n}\nContactForm.propTypes = {\n    onSubmit: PropTypes.func,\n}","import styled from \"@emotion/styled\";\n\nexport const DeleteBtn = styled.button`\ncolor: #fff;\nbackground-color: #008080;\nborder: none;\nborder-radius:3px;\npadding:6px;\nmargin-left: 40px;\nopacity:0.7;\n&:hover {\n    opacity:1;\n}`\n\nexport const Items = styled.ul`\nlist-style-type: none;\npadding: 0;\ncolor:#fff;\ndisplay: flex;\nflex-direction:column;\ngap: 15px;\n`\n\nexport const Item = styled.li`\ndisplay: flex;\npadding: 12px;\nborder-radius: 3px;\nfont-size: 22px;\njustify-content: space-between;\nbackground-color: #20B2AA;`\n\n","import PropTypes from 'prop-types';\nimport { DeleteBtn, Items, Item } from './ContactList.styled';\nimport { deleteContact } from 'Redux/contacts/Operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'Redux/contacts/Selectors';\nexport const ContactList = () => {\n\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectFilteredContacts);\n    return <  Items  >\n        {contacts.map(contact => (<Item key={contact.id}>{contact.name}: {contact.number}<DeleteBtn type='button' onClick={() => dispatch(deleteContact(contact.id))}>Delate</DeleteBtn ></Item>))}\n    </ Items  >\n}\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string,\n            name: PropTypes.string,\n            number: PropTypes.string,\n        }),\n    ),\n}","import styled from \"@emotion/styled\";\n\nexport const FilterField = styled.label`\ndisplay:flex;\nflex-direction:column;\ngap:12px;\nwidth: 300px;`\n\nexport const Input = styled.input`\n\nmargin-top:10px;\npadding-left: 15px;\nborder-radius: 3px;\nborder: 1px solid #008080;\nheight: 50px;`","import PropTypes from 'prop-types';\nimport { FilterField, Input } from './Filter.styled';\nimport { filter } from 'Redux/contacts/FilterSlice';\nimport { selectFilter } from 'Redux/contacts/Selectors';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const value = useSelector(selectFilter);\n\n    return <FilterField>Find contact by Name\n        <Input type=\"text\" value={value}\n            onChange={(e) => { dispatch(filter(e.currentTarget.value)) }}\n            onBlur={() => dispatch(filter(''))}></Input></FilterField>\n}\n\nFilter.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    onBlur: PropTypes.func,\n}","import styled from \"@emotion/styled\";\n\n\nexport const Title = styled.h1`\ncolor: #696969;\n`\n\nexport const ListTitle = styled.h2`\ncolor: #696969;\n`\n\nexport const Container = styled.section`\ndisplay:flex;\nflex-direction:column;\nalign-items: center;`","import { fetchContacts } from 'Redux/contacts/Operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from \"react\";\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Filter } from '../components/Filter/Filter';\nimport { selectIsLoading, selectError } from 'Redux/contacts/Selectors';\nimport { Title, ListTitle, Container } from './Phonebook.styled';\n\nconst PhonebookPage = () => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch])\n    return (\n\n        < Container>\n            <Title>Phonebook</Title>\n            <ContactForm />\n            {isLoading && !error && <b>Request in progress...</b>}\n            <ListTitle>Contacts</ListTitle>\n            <Filter />\n            <ContactList /></ Container>)\n}\n\nexport default PhonebookPage;"],"names":["Form","styled","FormikForm","FormField","Input","Field","AddBtn","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContacts","state","contacts","selectFilter","filter","selectFilteredContacts","normalizeFilter","toLowerCase","contact","includes","selectIsLoading","isLoading","selectError","error","initialValues","number","ContactForm","dispatch","useDispatch","useSelector","onSubmit","values","resetForm","alert","addContact","type","pattern","title","required","placeholder","DeleteBtn","Items","Item","ContactList","onClick","deleteContact","id","FilterField","Filter","onChange","e","currentTarget","onBlur","Title","ListTitle","Container","useEffect","fetchContacts"],"sourceRoot":""}